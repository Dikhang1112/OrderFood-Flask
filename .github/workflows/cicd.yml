name: CI/CD Flask (Dev - no Docker)

on:
  push:
    branches: [ cicd ]

jobs:
  build_and_smoke_test:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env from secret (override for CI)
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          echo "SQLALCHEMY_DATABASE_URI=sqlite:///ci_test.db" >> .env
          echo "FLASK_DEBUG=0" >> .env
          echo "PORT=5000" >> .env

      - name: Run app (background) & early diagnostics
        env:
          PYTHONUNBUFFERED: "1"
        run: |
          # chạy dưới dạng module để Python nhận package OrderFood
          nohup python -m OrderFood.index > app.log 2>&1 &
          echo $! > app.pid
          sleep 3
          echo "=== first logs ==="
          sed -n '1,120p' app.log || true
          echo "=== listening ports ==="
          ss -ltnp || true

      - name: Wait for port & smoke test
        run: |
          for i in {1..20}; do
            if ss -ltn | grep -q ":5000"; then
              echo "Port 5000 is listening."
              break
            fi
            echo "Waiting for port 5000... ($i)"
            sleep 2
          done

          # nếu trang chủ của anh không phải '/', đổi URL tại đây
          TARGET_URL="http://127.0.0.1:5000/"
          for i in {1..15}; do
            if curl -fsS "$TARGET_URL" > /dev/null; then
              echo "Smoke test OK"
              exit 0
            fi
            echo "Waiting app HTTP... ($i)"
            sleep 2
          done

          echo "Smoke test FAILED"
          echo "===== tail app.log ====="
          tail -n 300 app.log || true
          exit 1

      - name: Stop app & show last logs
        if: always()
        run: |
          if [ -f app.pid ]; then kill $(cat app.pid) || true; fi
          echo "===== final tail app.log ====="
          tail -n 200 app.log || true

      - name: Upload app.log artifact (for debugging)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: app-log
          path: app.log
